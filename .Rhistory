devtools::use_readme_rmd()
311*8.55
23958-23813
145*6.5
145*6.96
devtools::document()
145*6.96
devtools::document()
devtools::document()
devtools::load_all(".")
cv_base(1:100)
devtools::load_all(".")
cv_base(as.data.table(iris), "Species")
?cv_base
devtools::document()
?cv_base
?cv_split_temporal
devtools::document()
?cv_split_temporal
devtools::document()
?cv_split_temporal
devtools::document()
?cv_split_temporal
?cv_base
?data.table
devtools::document()
?data.table
?cv_base
devtools::document()
?cv_base
devtools::document()
?cv_split_temporal
devtools::load_all(".")
?cv_split_temporal
000
devtools::load_all(".")
devtools::load_all(".")
devtools::document()
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
library(resampleR)
help(package = "resampleR")
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
?as.POSIXct
Sys.time()
z <- 1472562988
# ways to convert this
as.POSIXct(z, origin = "1960-01-01")
1.5*10e8
as.POSIXct(1.5*10e8)
as.POSIXct(1.5*10e8, origin = "1960-01-01")
as.POSIXct(1.6*10e8, origin = "1960-01-01")
as.POSIXct(1.8*10e8, origin = "1960-01-01")
24*3600*1000
as.POSIXct(1.8*10e8 + 24*3600*1000, origin = "1960-01-01")
as.POSIXct(1.8*10e8 + 24*3600*100, origin = "1960-01-01")
as.POSIXct(1.8*10e8 + 24*3600, origin = "1960-01-01")
24*36000
dt <- data.table(
id = rep(1:100, each = 10),
time = rep(seq(1.8*10e8:(1.8*10e8 + 24 * 3600 * 10)), 100)
)
dt <- data.table(
id = rep(1:100, each = 10),
time = rep(seq(1.8*10e8:(1.8*10e8 + 24 * 3600 * 10), by = 24 * 3600), 100)
)
dt <- data.table(
id = rep(1:100, each = 10),
time = rep(seq(1.8*10e8, 1.8*10e8 + 24 * 3600 * 10, by = 24 * 3600), 100)
)
seq(1.8*10e8, 1.8*10e8 + 24 * 3600 * 10, by = 24 * 3600)
dt <- data.table(
id = rep(1:100, each = 10),
time = rep(seq(1.8*10e8, 1.8*10e8 + 24 * 3600 * 9, by = 24 * 3600), 100)
)
View(dt)
dt <- data.table(
id = rep(1:100, each = 10),
time = as.POSIXct(rep(seq(1.8*10e8, 1.8*10e8 + 24 * 3600 * 9,
by = 24 * 3600),
100))
)
dt <- data.table(
id = rep(1:100, each = 10),
time = as.POSIXct(rep(seq(1.8*10e8, 1.8*10e8 + 24 * 3600 * 9,
by = 24 * 3600),
100), origin = "1960-01-01")
)
View(dt)
24 * 3600 * 9
dt <- data.table(
id = rep(1:100, each = 10),
time = as.POSIXct(rep(seq(1.8*10e8, 1.8*10e8 + 777600, by = 24 * 3600), 100),
origin = "1960-01-01")
)
rnorm(1e4)
dt <- data.table(
id = rep(1:100, each = 10),
time = as.POSIXct(rep(seq(1.8*10e8, 1.8*10e8 + 777600, by = 24 * 3600), 100),
origin = "1960-01-01"),
target = rnorm(1e3)
)
View(dt)
cv_split_temporal(dt, "target", id = "id", time = "time")
id = "id"
time = "time"
data = dt
y = "target"
cols <- c(y, id, time)
assert_data_table(data)
assert_names(names(data), must.include = cols)
assert_integerish(nfolds, lower = 2L, upper = 20L)
nfolds = 5L
assert_names(names(data), must.include = cols)
assert_integerish(nfolds, lower = 2L, upper = 20L)
splits <- data[, .SD, .SDcols = cols]
# Sort by time within id
setorderv(splits, c(id, time))
View(splits)
splits[fold := create_folds(y = data[, get(y)],
nfolds = nfolds,
probs = probs)]
data[, get(y)]
splits[, get(y)]
create_folds(y = splits[, get(y)],
nfolds = nfolds,
probs = probs)
probs = seq(0, 1, length.out = 11)
create_folds(y = splits[, get(y)],
nfolds = nfolds,
probs = probs)
splits[, fold := create_folds(y = splits[, get(y)],
nfolds = nfolds,
probs = probs)]
View(splits)
splits[, fold := NULL]
splits[, fold := create_folds(y = get(y),
nfolds = nfolds,
probs = probs)]
View(splits)
splits[, fold := create_folds(y = get(y),
nfolds = nfolds,
probs = probs)]
View(splits)
splits[, fold := create_folds(y = get(y), nfolds = nfolds, probs = probs)]
cn <- paste0("split_", seq_len(nfolds))
# One hot for each split
for (i in seq_along(1:nfolds)) {
splits[, paste0("split_", i) := 0L]
splits[folds == i, paste0("split_", i) := 1L]
}
splits <- data[, .SD, .SDcols = cols]
# Sort by time within id
setorderv(splits, c(id, time))
splits[, fold := create_folds(y = get(y), nfolds = nfolds, probs = probs)]
cn <- paste0("split_", seq_len(nfolds))
# One hot for each split
for (i in seq_along(1:nfolds)) {
splits[, paste0("split_", i) := 0L]
splits[fold == i, paste0("split_", i) := 1L]
}
View(splits)
to_replace <- splits[, .N, by = get(id)][N > 1]
splits[, .N, by = get(id)]
id
?get
splits[, .N, by = id]
dt <- data.table(
user = rep(1:100, each = 10),
time = as.POSIXct(rep(seq(1.8*10e8, 1.8*10e8 + 777600, by = 24 * 3600), 100),
origin = "1960-01-01"),
target = rnorm(1e3)
)
id = "user"
cols <- c(y, id, time)
assert_data_table(data)
assert_names(names(data), must.include = cols)
assert_integerish(nfolds, lower = 2L, upper = 20L)
data = dt
assert_names(names(data), must.include = cols)
assert_integerish(nfolds, lower = 2L, upper = 20L)
splits <- data[, .SD, .SDcols = cols]
# Sort by time within id
setorderv(splits, c(id, time))
splits[, fold := create_folds(y = get(y), nfolds = nfolds, probs = probs)]
cn <- paste0("split_", seq_len(nfolds))
# One hot for each split
for (i in seq_along(1:nfolds)) {
splits[, paste0("split_", i) := 0L]
splits[fold == i, paste0("split_", i) := 1L]
}
to_replace <- splits[, .N, by = get(id)][N > 1]
splits[, .N, by = get(id)]
to_replace <- splits[, .N, by = get(id)][N > 1]
to_replace
View(splits)
f <- function(x) {
if (any(x > 0L)) x <- c(rep(0L, length(x) - 1L), 1L)
return(x)
}
splits[to_replace,
(cn) := lapply(.SD, f),
on = get(id),
.SDcols = cn,
by = get(id)]
View(splits)
View(splits)
View(to_replace)
setnames(to_replace, c(get(id), "N"))
to_replace <- splits[, .N, by = get(id)][N > 1]
setnames(to_replace, c(id, "N"))
View(to_replace)
splits[to_replace,
(cn) := lapply(.SD, f),
on = get(id),
.SDcols = cn,
by = get(id)]
splits[to_replace,
(cn) := lapply(.SD, f),
on = id,
.SDcols = cn,
by = get(id)]
View(splits)
devtools::document()
devtools::document()
?cv_split_temporal
24 * 3600
cv_split_temporal(dt, "target", "user", "time")
devtools::document()
?cv_split_temporal
cv_split_temporal(dt, "target", "user", "date")
dt <- data.table(
user = rep(1:100, each = 10),
date = as.POSIXct(rep(seq(1.8*10e8, 1.8*10e8 + 777600, by = 86400), 100),
origin = "1960-01-01"),
target = rnorm(1e3)
)
cv_split_temporal(dt, "target", "user", "date")
devtools::load_all(".")
library(resampleR)
777600/2
5e2
dt <- data.table(
user = rep(1:100, each = 5),
date = as.POSIXct(rep(seq(1.8*10e8, 1.8*10e8 + 388800, by = 86400), 100),
origin = "1960-01-01"),
target = rnorm(5e2)
)
cv_split_temporal(dt, "target", "user", "date")
devtools::document()
?cv_split_temporal
devtools::document()
?cv_split_temporal
devtools::document()
?cv_split_temporal
devtools::document()
?cv_split_temporal
?cv_split_group_kfold
data
devtools::document()
?cv_split_temporal
dt <- data.table(
user = rep(1:100, each = 5),
date = as.POSIXct(rep(seq(1.8*10e8, 1.8*10e8 + 388800, by = 86400), 100),
origin = "1960-01-01"),
target = rnorm(5e2)
)
cv_split_temporal(dt, "target", "user", "date")
data = dt
names(dt)
y = "target"
id = "user"
cols <- c(y, id)
assert_data_table(data)
assert_names(names(data), must.include = cols)
assert_integerish(nfolds, lower = 2L, upper = 20L)
data <- data[, .SD, .SDcols = cols]
probs = seq(0, 1, length.out = 11)
cols <- c(y, id)
assert_data_table(data)
assert_names(names(data), must.include = cols)
assert_integerish(nfolds, lower = 2L, upper = 20L)
splits <- data[, .SD, .SDcols = cols]
splits[, fold := create_folds(y = get(y), nfolds = nfolds, probs = probs)]
data[, get(id)]
match(data[, get(id)], splits[, get(id)])
splits[match(data[, get(id)], splits[, get(id)])]
cn <- paste0("split_", seq_len(nfolds))
View(splits)
tmp = splits[match(data[, get(id)], splits[, get(id)])]
View(tmp)
data
cols <- c(y, id)
assert_data_table(data)
assert_names(names(data), must.include = cols)
assert_integerish(nfolds, lower = 2L, upper = 20L)
data <- data[, .SD, .SDcols = cols]
splits <- data[, .(target = mean(get(y))), by = id]
View(splits)
splits[, .N, by = get(id)][N > 1]
id
splits
splits[, .N, by = id][N > 1]
splits[, .N, by = id]
cols <- c(y, id, time)
assert_data_table(data)
assert_names(names(data), must.include = cols)
assert_integerish(nfolds, lower = 2L, upper = 20L)
data
data <- dt
cols <- c(y, id, time)
assert_data_table(data)
assert_names(names(data), must.include = cols)
data
cols
names(data)
assert_names(names(data), must.include = cols)
dt <- data.table(
user = rep(1:100, each = 5),
date = as.POSIXct(rep(seq(1.8*10e8, 1.8*10e8 + 388800, by = 86400), 100),
origin = "1960-01-01"),
target = rnorm(5e2)
)
data = dt
cols <- c(y, id, time)
assert_data_table(data)
assert_names(names(data), must.include = cols)
cols
y = "target"
time = "date"
cols <- c(y, id, time)
assert_data_table(data)
assert_names(names(data), must.include = cols)
assert_integerish(nfolds, lower = 2L, upper = 20L)
splits <- data[, .SD, .SDcols = cols]
# Sort by time within id
setorderv(splits, c(id, time))
splits[, fold := create_folds(y = get(y), nfolds = nfolds, probs = probs)]
cn <- paste0("split_", seq_len(nfolds))
# One hot for each split
for (i in seq_along(1:nfolds)) {
splits[, paste0("split_", i) := 0L]
splits[fold == i, paste0("split_", i) := 1L]
}
splits[, .N, by = get(id)]
splits[, .N, by = id]
to_replace <- splits[, .N, by = id][N > 1]
View(to_replace)
f <- function(x) {
if (any(x > 0L)) x <- c(rep(0L, length(x) - 1L), 1L)
return(x)
}
splits[to_replace,
(cn) := lapply(.SD, f),
on = id,
.SDcols = cn,
by = id]
View(splits)
devtools::load_all(".")
dt <- data.table(
user = rep(1:100, each = 5),
date = as.POSIXct(rep(seq(1.8*10e8, 1.8*10e8 + 388800, by = 86400), 100),
origin = "1960-01-01"),
target = rnorm(5e2)
)
cv_split_temporal(dt, "target", "user", "date")
dt <- data.table(
user = rep(1:100, each = 5),
date = as.POSIXct(rep(seq(1.8*10e8, 1.8*10e8 + 388800, by = 86400), 100),
origin = "1960-01-01"),
target = rnorm(5e2)
)
cv_split_temporal(dt, "target", "user", "date")
cols <- c(y, id)
assert_data_table(data)
assert_names(names(data), must.include = cols)
assert_integerish(nfolds, lower = 2L, upper = 20L)
data <- data[, .SD, .SDcols = cols]
splits <- data[, .(target = mean(y)), by = id]
warnings()
data = dt
cols <- c(y, id)
assert_data_table(data)
assert_names(names(data), must.include = cols)
assert_integerish(nfolds, lower = 2L, upper = 20L)
data <- data[, .SD, .SDcols = cols]
splits <- data[, .(target = mean(get(y))), by = id]
View(splits)
splits[, fold := create_folds(y = get(y), nfolds = nfolds, probs = probs)]
View(data)
View(splits)
splits <- splits[match(data[, get(id)], splits[, get(id)])]
View(splits)
cn <- paste0("split_", seq_len(nfolds))
# One hot for each split
for (i in seq_along(1:nfolds)) {
splits[, paste0("split_", i) := 0L]
splits[fold == i, paste0("split_", i) := 1L]
}
devtools::load_all(".")
library(resampleR)
deparse(mean(mean(1)))
deparse(mean(1))
a = deparse(mean(1))
a = quote(mean(1))
a
eval(a)
install.packages(c("class", "htmlTable", "sjmisc", "tibble"))
library(data.table)
data.table(iris, iris)
library(data.table)
dt <- as.data.table(iris)
f <- function(x) {x[, new := 1]}
a <- f(dt)
a
a
dt
dt <- as.data.table(iris)
f <- function(x) {x <- x[]; x[, new := 1]}
rm(a)
a <- f(dt)
dt
dt
a
a
View(a)
View(dt)
?copy
dt <- as.data.table(iris)
f <- function(x) {copy(x)[, new := 1]}
a <- f(dt)
a
a
dt
